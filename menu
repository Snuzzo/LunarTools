#!/system/bin/sh
#
# dsixda was here - some original scripting was needed
# Kludgy hack to help with kernels
boot=$(grep -i "boot" /proc/emmc | sed 's/.*boot\(.*\)<\/recovery.*/\1/' | sed 's/:[^:]*$//')
recovery=$(grep -i "recovery" /proc/emmc | sed 's/.*boot\(.*\)<\/recovery.*/\1/' | sed 's/:[^:]*$//')
#Let's not rely on static values, we will get them from emmc hardware instead
DATE=$(date +"%m%d%y")
clear
echo "Loading 	LunarMenu"
sleep 1
clear
echo "Loading 		LunarMenu"
sleep 1
clear
echo "Loading 			LunarMenu"
sleep 1
clear
echo "Loading 				LunarMenu"
sleep 1
clear
echo "Loading 					LunarMenu"
sleep 1
clear
echo "Storage selection:"
echo
extsd=$(grep -i "/devices/platform/msm_sdcc." /system/etc/vold.fstab | sed 's/dev_mount //g' | sed 's/ .*//g')
#Let's not rely on static values, we will get them from emmc hardware instead
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $extsd; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 or 99 = exit]:"
read input
if [ "$input" == "0" ];then
exit
fi
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
extsd=$(grep -i "/devices/platform/msm_sdcc." /system/etc/vold.fstab | sed 's/dev_mount //g' | sed 's/ .*//g' | head -n$input | tail -n1)
if [ ! -d "/$extsd/lunar" ]; then
mkdir /$extsd/lunar
fi
cd /$extsd/lunar
#dd if=/dev/block/$recovery of=/$extsd/lunar/recoverytemp.img 2> /dev/null
#abootimg -x recoverytemp.img > /dev/null
#recoverysha1=$(sha1sum initrd.img | cut -d ' ' -f 1)
#rm recoverytemp.img
#rm zImage
#rm bootimg.cfg
#rm initrd.img
currentrom1=$(grep -i "ro.aa.taskid=" /system/build.prop | sed "s/ro.aa.taskid=//g")
currentrom3=$(grep -i "otaupdater.otaid=" /system/build.prop | sed "s/otaupdater.otaid=//g")
currentrom5=$(grep -i "ro.goo.developerid=" /system/build.prop | sed "s/ro.goo.developerid=//g")
currentrom7=$(grep -i "ro.cm.version=" /system/build.prop | sed "s/ro.cm.version=//g")
currentrom8=$(grep -i "ro.build.version.release=" /system/build.prop | sed "s/ro.build.version.release=//g")
if [ "$currentrom1" == "264016" ];then
currentrom="Sense-3.6-OTA"
fi
if [ "$currentrom1" == "275361" ];then
currentrom="Sense-3.6-Global"
fi
if [ "$currentrom1" == "311390" ];then
currentrom="Sense-3.6-Global"
fi
if [ "$currentrom1" == "290923" ];then
currentrom="Sense-3.6-Global_Sense4.X"
fi
if [ "$currentrom1" == "249167" ];then
currentrom="Sense-3.6-Global_Sense4.X"
fi
if [ "$currentrom1" == "263510" ];then
currentrom="Sense4.X"
fi
if [ "$currentrom3-xxx" != "-xxx" ]; then
currentrom2=$(grep -i "otaupdater.otaver=" /system/build.prop | sed "s/otaupdater.otaver=//g")
currentrom=$(echo "$currentrom3-v$currentrom2")
fi
if [ "$currentrom5-xxx" != "-xxx" ]; then
currentrom4=$(grep -i "ro.goo.version=" /system/build.prop | sed "s/ro.goo.version=//g")
currentrom=$(echo "$currentrom5-v$currentrom4")
fi
if [ "$currentrom7-xxx" != "-xxx" ]; then
currentrom=$(echo "cm$currentrom7" | sed "s/-UNOFFICIAL//g" | sed "s/-vigor//g")
fi
currentrom=$(echo $(echo $currentrom | sed 's/[^a-zA-Z0-9]//g')-$currentrom8)
echo $currentrom >> lunardebug.log
echo $currentrom > /$extsd/lunar/currentromconfig
if [ -e "/$extsd/lunar/currentromconfig" ]; then
echo "Current rom is set to $currentrom"
echo "is this correct?"
echo "1) Yes"
echo "2) No"
echo
echo "Choose number selection[99 = abort]:"
read configconfirm
if [ "$configconfirm" == "99" ]; then
exit
fi
if [ "$configconfirm" == "1" ]; then
echo
else
echo "Enter name of current rom [Aa-Zz|0-9] then press [ENTER]:"
read currentrom
currentrom=$(echo $currentrom | sed 's/[^a-zA-Z0-9]//g')
fi
fi
echo $configconfirm > lunardebug.log
echo $currentrom > /$extsd/lunar/currentromconfig
echo $currentrom >> lunardebug.log
echo
echo "1) Source a previously saved config from cmdline/initd script"
echo "2) Backup\Flash a recovery.img"
echo "3) Update current kernel with an AnyKernel zImage"
echo "4) Flash boot.img from zip and auto-reboot to recovery"
echo
echo "Choose number selection[99 = abort]:"
read menu
        case "$menu" in
                "1")
			echo "1) Source a previously saved cfg from cmdline/initd script" >> lunardebug.log
			grep_cmd2=`find *.cfg`
			#-- Let's source any .cfg's found from sbin --#
			grep_cmd3=`find /sbin -name "*.cfg"`
			cd /$extsd/lunar/
			grep_cmd=`echo $grep_cmd2 $grep_cmd3`
			echo "Previous configurations:" 
			echo
			for filename in $grep_cmd 
			    do
 			     count=$(($count+1))

 			     filename=`echo $filename | sed 's/temp_space/ /g'`

   			   # Store file names in an array
     			 file_array[$count]=$filename

			      echo "  ($count) $filename" >> temp.list
  			  done

  			  more temp.list
 			  rm temp.list

			    echo
			    echo -n "Enter selection number to flash (exit = 0): "

    			read enterNumber
    			echo
			if [ "$enterNumber" == "0" ]
    			then
      			exit 0
			fi
			if [ "`echo $enterNumber | sed 's/[0-9]*//'`" == "" ] || [ "enterNumber"=="1" ]
    			then
      			file_chosen=${file_array[$enterNumber]}
			fi
			echo "Kernel type selection:"
			echo 
			echo "1) Set values via Command Line"
			echo "2) Set values via Init.d"
			echo
			echo "Choose number selection[0 or 99 = exit]:"
			read kerneltype
			if [ "$kerneltype" -gt "2" ];then
			echo "Invalid selection: Aborting script"
			exit
			fi
				case "$kerneltype" in
					"0")
						exit
						;;
					"1")
						kerneltype=cmdline
						;;
					"2")
						kerneltype=initd
						;;
					"99")
						exit
						;;
				esac
			clear
			echo "Last chance before we flash" 
			echo "You chose $file_chosen"
			echo 
			echo "1) Yes; I am ready flash/source it right away"
			echo "2) No; let's just save it for later"
			echo "Confirm flash?"
			read confirm
			case "$confirm" in
				"1")
					echo "Flashing selection in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					echo "$file_chosen chosen" >> lunardebug.log
					if [ "$kerneltype" == "cmdline" ];then
					if [[ $file_chosen == *.cfg ]]; then
					dd if=/dev/block/$boot of=/$extsd/lunar/tempboot.img 2>> lunardebug.log
					abootimg -x /$extsd/lunar/tempboot.img >> lunardebug.log
					sed -i -e "s/gov.*//g" bootimg.cfg
					file_chosen=$(cat $file_chosen)
					sed -i -e "$ s/$/$file_chosen/g" bootimg.cfg
					sed -i -e "s/tcp.*//g" bootimg.cfg
					cat bootimg.cfg >> lunardebug.log
					abootimg -u tempboot.img -f bootimg.cfg >> lunardebug.log
					dd if=/$extsd/lunar/tempboot.img of=/dev/block/$boot 2>> lunardebug.log
					sh /system/bin/sysrw
					export $file_chosen
					echo '#!/system/bin/sh' > /system/etc/init.d/99lunar
					echo 'cat /proc/sys/net/ipv4/tcp_available_congestion_control > /proc/sys/net/ipv4/tcp_allowed_congestion_control' >> /system/etc/init.d/99lunar
					echo 'echo '$tcpcong' > /proc/sys/net/ipv4/tcp_congestion_control' >> /system/etc/init.d/99lunar
					rm bootimg.cfg
					rm initrd.img
					rm zImage
					rm tempboot.img
					fi
					if [[ $file_chosen == *.img ]]; then
					dd if=$file_chosen of=/dev/block/$boot 2>> lunardebug.log
					fi
					rm -r /data/dalvik-cache
					echo "Rebooting to recovery....."
					echo ".... to wipe Dalvik Cache & Cache"
					echo "--wipe_cache" >> /cache/recovery/command
					echo "GoodBye!"
					reboot recovery
					fi
					if [ "$kerneltype" == "initd" ];then
					export $(cat $file_chosen)
					sh /system/bin/sysrw
					echo '#!/system/bin/sh' > /system/etc/init.d/99lunar
					echo 'cat /proc/sys/net/ipv4/tcp_available_congestion_control > /proc/sys/net/ipv4/tcp_allowed_congestion_control' >> /system/etc/init.d/99lunar
					echo 'echo '$tcpcong' > /proc/sys/net/ipv4/tcp_congestion_control' >> /system/etc/init.d/99lunar
					echo 'echo ''"'$scheduler'"' '> /sys/block/mmcblk0/queue/scheduler' >> /system/etc/init.d/99lunar
					echo 'echo "'$gov'" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor' >> /system/etc/init.d/99lunar
					echo 'echo "'$minkhz'" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq' >> /system/etc/init.d/99lunar
					echo 'echo "'$maxkhz'" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq' >> /system/etc/init.d/99lunar
					if [ -e /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq ]; then
					echo 'echo '$maxscroff' > /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq' >> /system/etc/init.d/99lunar
					fi
					if [ -d "/sys/devices/system/cpu/cpu1/" ]; then
					echo 'echo "'$gov'" > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor' >> /system/etc/init.d/99lunar
					echo 'echo "'$minkhz'" > /sys/devices/system/cpu/cpu1/cpufreq/scaling_min_freq' >> /system/etc/init.d/99lunar
					echo 'echo "'$maxkhz'" > /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq' >> /system/etc/init.d/99lunar
					if [ -e /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq ]; then
					echo 'echo '$maxscroff' > /sys/devices/system/cpu/cpu1/cpufreq/screen_off_max_freq' >> /system/etc/init.d/99lunar
					fi
					fi
					if [ -d "/sys/devices/system/cpu/cpu2/" ]; then
					echo 'echo "'$gov'" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor' >> /system/etc/init.d/99lunar
					echo 'echo "'$minkhz'" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_min_freq' >> /system/etc/init.d/99lunar
					echo 'echo "'$maxkhz'" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq' >> /system/etc/init.d/99lunar
					if [ -e /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq ]; then
					echo 'echo '$maxscroff' > /sys/devices/system/cpu/cpu2/cpufreq/screen_off_max_freq' >> /system/etc/init.d/99lunar
					fi
					fi
					if [ -d "/sys/devices/system/cpu/cpu3/" ]; then
					echo 'echo "'$gov'" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor' >> /system/etc/init.d/99lunar
					echo 'echo "'$minkhz'" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_min_freq' >> /system/etc/init.d/99lunar
					echo 'echo "'$maxkhz'" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq' >> /system/etc/init.d/99lunar
					if [ -e /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq ]; then
					echo 'echo '$maxscroff' > /sys/devices/system/cpu/cpu3/cpufreq/screen_off_max_freq' >> /system/etc/init.d/99lunar
					fi
					fi
					if [ -e /sys/android_touch/sweep2wake ]; then
					echo 'echo '$s2w' > /sys/android_touch/sweep2wake' >> /system/etc/init.d/99lunar
					fi
					chmod 755 /system/etc/init.d/99lunar
					sh /system/bin/sysro
					fi
					exit
					;;
				"2")
					echo "Fine, I will be here when you get back :)"
					echo "This message will self-destruct in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					echo "P O O F!"
					exit
					;;
			esac
		$confirm
		;;
                "2")
			echo "2) Flash a recovery.img" >> lunardebug.log
			echo "Backup current recovery?"
			echo "1) Yes"
			echo "2) No"
			read backup
			case "$backup" in
				"1")
					mkdir recoverytemp
					dd if=/dev/block/$recovery of=/$extsd/lunar/recoverytemp/recoverytemp.img 2>> lunardebug.log
					cd recoverytemp
					abootimg -x recoverytemp.img
					recoverysize1=$(wc -c < zImage)
					recoverysize2=$(wc -c < initrd.img)
					recoverysize=$(($recoverysize1 + $recoverysize2 + 6120))
					recoveryhexsize=$(printf "%x\n" $recoverysize)
					sed -i "s/bootsize.*/bootsize = 0x$recoveryhexsize/g" bootimg.cfg
					abootimg -u recoverytemp.img -f bootimg.cfg
					echo "Your current recovery was saved to SDCard/Lunar/recovery_$DATE dir as recovery.img"
					cd ..
					if [ ! -d "/$extsd/recovery_$DATE" ]; then
					mkdir recovery_$DATE
					fi
					mv ./recoverytemp/recoverytemp.img ./recovery_$DATE/recovery.img
					rm -r /$extsd/lunar/recoverytemp
					;;
				"2")
					echo "Skipping creation of a recovery backup"
					;;
			esac
			grep_cmd=`find ./recovery* | grep -i \\.img$`
			echo "Recoveries found:" 
			echo
			for filename in $grep_cmd 
			    do
 			     count=$(($count+1))

 			     filename=`echo $filename | sed 's/temp_space/ /g'`

   			   # Store file names in an array
     			 file_array[$count]=$filename

			      echo "  ($count) $filename" >> temp.list
  			  done

  			  more temp.list
 			  rm temp.list

			    echo
			    echo -n "Enter selection number to flash (exit = 0): "

    			read enterNumber
    			echo
			if [ "$enterNumber" == "0" ]
    			then
      			exit 0
			fi
			if [ "`echo $enterNumber | sed 's/[0-9]*//'`" == "" ] || [ "enterNumber"=="1" ]
    			then
      			file_chosen=${file_array[$enterNumber]}
			fi
			echo "Last chance before we flash" 
			echo "You chose $file_chosen"
			echo 
			echo "1) Yes; I am ready flash it right away"
			echo "2) No; let's just save it for later"
			echo "Confirm flash?"
			read confirm
			case "$confirm" in
				"1")
					echo "Flashing selection in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					dd if=$file_chosen of=/dev/block/$recovery 2>> lunardebug.log
					echo "Done flashing....."
					echo "GoodBye!"
					exit
					;;
				"2")
					echo "Fine, I will be here when you get back :)"
					echo "This message will self-destruct in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					echo "P O O F!"
					exit
					;;
			esac
			$confirm
			;;
		"3")
			echo "3) Update current kernel with an AnyKernel zImage" >> lunardebug.log
			grep_cmd1=`find *.zip`
			grep_cmd2=`find zimage*`
			grep_cmd=`echo $grep_cmd1 $grep_cmd2`
			echo "zImages & Zip files found:" 
			echo
			for filename in $grep_cmd 
			    do
 			     count=$(($count+1))

 			     filename=`echo $filename | sed 's/temp_space/ /g'`

   			   # Store file names in an array
     			 file_array[$count]=$filename

			      echo "  ($count) $filename" >> temp.list
  			  done

  			  more temp.list
 			  rm temp.list

			    echo
			    echo -n "Enter selection number to flash (exit = 0): "

    			read enterNumber
    			echo
			if [ "$enterNumber" == "0" ]
    			then
      			exit 0
			fi
			if [ "`echo $enterNumber | sed 's/[0-9]*//'`" == "" ] || [ "enterNumber"=="1" ]
    			then
      			file_chosen=${file_array[$enterNumber]}
			fi
			echo "Last chance before we flash" 
			echo "You chose $file_chosen"
			echo 
			echo "1) Yes; I am ready flash it right away"
			echo "2) No; let's just save it for later"
			echo "Confirm flash?"
			read confirm
			case "$confirm" in
				"1")
					echo "Flashing selection in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					echo $file_chosen >> lunardebug.log
					if [[ $file_chosen == *.zip ]]; then
					file_chosen=$(echo $file_chosen | sed -e "s|./|/$extsd/|")  
					zimage=$(echo $file_chosen | sed "s/^/zimage_/" | sed -e "s|.zip||")
					md51=$(md5sum $file_chosen | cut -d ' ' -f 1)
					md52=$(echo $file_chosen | sed -e "s|.zip|.md5|")
					if [ -e $md52 ]; then
					md52=$(cat $md52 | cut -d ' ' -f 1)
					if [ "$md51" == "$md52" ]; then
					echo "Zip MD5 Checksum matches"
					echo "Zip MD5 Checksum matches" >> lunardebug.log
					else
					echo "MD5 checksum mismatch: Aborting script"
					echo "MD5 checksum mismatch: Aborting script" >> lunardebug.log
					exit
					fi 
					fi
					echo "Scanning zip file & Unzipping zImage"
					unzip -e -o $file_chosen lunarmenu/$zimage -d /$extsd/lunar/ 2>> lunardebug.log
					unzip -e -o $file_chosen kernel/zImage -d /$extsd/lunar/ 2>> lunardebug.log
					if [ -e zImage ]; then
					mv zImage $zimage
					fi
					if [ ! -e $zimage ]; then
					echo "Aborting script; is not a valid AnyKernel zip"
					 echo "Aborting script; is not a valid AnyKernel zip" >> lunardebug.log
					exit
					fi
					fi
					if [[ $file_chosen == *.zip ]]; then
					sum1=$(sha1sum $zimage | cut -d ' ' -f 1)
					else
					sum1=$(sha1sum $file_chosen | cut -d ' ' -f 1)
					fi
					if [ ! -d "/$extsd/temp" ]; then
					#-- Checking if temp exists if not we will create it
					mkdir /$extsd/temp
					fi
					dd if=/dev/block/$boot of=/$extsd/temp/tempboot.img 2>> lunardebug.log
					abootimg -x /$extsd/temp/tempboot.img >> lunardebug.log
					sum2=$(sha1sum zImage | cut -d ' ' -f 1)
					cp /$extsd/temp/tempboot.img /$extsd/lunar/boot_last_known_good.img
					echo "Pulled a copy of your current boot.img to lunar/boot_last_known_good.img"
					#-- The next line is dependent on the placement of abootimg
					cd /$extsd/lunar
					if [[ $file_chosen == *.zip ]]; then
					size1=$(wc -c < $zimage)
					else
					size1=$(wc -c < $file_chosen)
					fi
					if [[ $file_chosen == *.zip ]]; then
					abootimg -u /$extsd/temp/tempboot.img -k $zimage >> lunardebug.log
					else
					abootimg -u /$extsd/temp/tempboot.img -k $file_chosen >> lunardebug.log
					fi
					size2=$(wc -c < /$extsd/lunar/initrd.img)
					size=$(($size1 + $size2 + 6120))
					hexsize=$(printf "%x\n" $size)
					sed -i "s/bootsize.*/bootsize = 0x$hexsize/g" /$extsd/lunar/bootimg.cfg
					abootimg -u /$extsd/temp/tempboot.img -f /$extsd/lunar/bootimg.cfg >> lunardebug.log
					cd /$extsd/temp
					dd if=/$extsd/temp/tempboot.img of=/dev/block/$boot 2>> lunardebug.log
					dd if=/dev/block/$boot of=/$extsd/temp/tempboot.img 2>> lunardebug.log
					abootimg -x /$extsd/temp/tempboot.img >> lunardebug.log
					sed -i "s/bootsize.*/bootsize = 0x$hexsize/g" bootimg.cfg
					abootimg -u /$extsd/temp/tempboot.img -f bootimg.cfg >> lunardebug.log
					sum3=$(sha1sum zImage | cut -d ' ' -f 1)
					if [[ $file_chosen == *.zip ]]; then
					echo "New zImage sha1sum is $sum1"
					else
					echo "$file_chosen sha1sum is $sum1"
					fi
					echo "Current zImage sha1sum is $sum2"
					if [ "$sum3" == "$sum1" ]; then
					echo "flashed ok"
					if [[ $file_chosen == *.zip ]]; then
					currentboot=$(echo $zimage | sed -e "s|zimage|boot_"$currentrom"_|")
					else
					currentboot=$(echo $file_chosen | sed -e "s|zimage|boot_"$currentrom"_|")
					fi
					echo "Copy of your updated boot.img is at lunar/$currentboot.img"
					mv /$extsd/temp/tempboot.img /$extsd/lunar/$currentboot.img
					rm /$extsd/lunar/boot_last_known_good.img
					else
					echo "flash unsuccessful"
					echo "restoring boot_last_known_good.img"
					dd if=/$extsd/lunar/boot_last_known_good.img of=/dev/block/$boot 2>> lunardebug.log
					fi
					rm -r /$extsd/temp
					rm /$extsd/lunar/zImage
					rm /$extsd/lunar/initrd.img
					rm /$extsd/lunar/bootimg.cfg
					rm -r /data/dalvik-cache
					if [[ $file_chosen == *.zip ]]; then
					file_chosen=$(echo $file_chosen | sed -e "s|/$extsd/|/sdcard/|")
					echo "--update_package=$file_chosen" > /cache/recovery/command
					echo "Rebooting to recovery....." 
					echo "... to flash matching zip to finish installation"
					else
					echo "Rebooting to recovery....." 
					echo "... to wipe caches"
					fi
					echo "--wipe_cache" >> /cache/recovery/command
					echo "GoodBye!"
					reboot recovery
					;;
				"2")
					echo "Fine, I will be here when you get back :)"
					echo "This message will self-destruct in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					echo "P O O F!"
					exit
					;;
			esac
		$confirm
		;;
		"4")
			echo "4) Flash boot.img from zip and auto-reboot to recovery" >> lunardebug.log
			grep_cmd=`find *.zip`
			echo "Previous configurations:" 
			echo
			for filename in $grep_cmd 
			    do
 			     count=$(($count+1))

 			     filename=`echo $filename | sed 's/temp_space/ /g'`

   			   # Store file names in an array
     			 file_array[$count]=$filename

			      echo "  ($count) $filename" >> temp.list
  			  done

  			  more temp.list
 			  rm temp.list

			    echo
			    echo -n "Enter selection number to flash (exit = 0): "

    			read enterNumber
    			echo
			if [ "$enterNumber" == "0" ]
    			then
      			exit 0
			fi
			if [ "`echo $enterNumber | sed 's/[0-9]*//'`" == "" ] || [ "enterNumber"=="1" ]
    			then
      			file_chosen=${file_array[$enterNumber]}
			fi
			echo "Last chance before we flash" 
			echo "You chose $file_chosen"
			echo 
			echo "1) Yes; I am ready flash it right away"
			echo "2) No; let's just save it for later"
			echo "Confirm flash?"
			read confirm
			case "$confirm" in
				"1")
					echo "Flashing selection in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					unzip -e -o $file_chosen boot.img -d /$extsd/lunar/ 2>> lunardebug.log
					dd if=/$extsd/lunar/boot.img of=/dev/block/$boot 2>> lunardebug.log
					rm boot.img
					echo "Rebooting to recovery....."
					echo "... Please finish flashing $file_chosen"
					echo "GoodBye!"
					reboot recovery
					;;
				"2")
					echo "Fine, I will be here when you get back :)"
					echo "This message will self-destruct in ..."
					echo "5"
					sleep 1
					echo "4"
					sleep 1
					echo "3"
					sleep 1
					echo "2"
					sleep 1
					echo "1"
					sleep 1
					echo "P O O F!"
					exit
					;;
			esac
		$confirm
		;;
		"99")
			exit
			;;
        esac
$menu
