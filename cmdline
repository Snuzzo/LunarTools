#!/system/bin/sh
#
# 
# Kludgy hack to help with kernels
boot=$(grep -i "boot" /proc/emmc | sed 's/.*boot\(.*\)<\/recovery.*/\1/' | sed 's/:[^:]*$//')
recovery=$(grep -i "recovery" /proc/emmc | sed 's/.*boot\(.*\)<\/recovery.*/\1/' | sed 's/:[^:]*$//')
hardware=$(grep -i "board=" /system/build.prop | sed "s/.*board=//" | cut -d" " -f1)
echo "Storage selection:"
echo
extsd=$(grep "/devices/platform/msm_sdcc." /system/etc/vold.fstab | sed 's/dev_mount //g' | sed 's/ .*//g')
#Let's not rely on static values, we will get them from emmc hardware instead
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $extsd; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 or 99 = exit]:"
read input
if [ "$input" == "0" ];then
exit
fi
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
extsd=$(grep "/devices/platform/msm_sdcc." /system/etc/vold.fstab | sed 's/dev_mount //g' | sed 's/ .*//g' | head -n$input | tail -n1)
#Let's not rely on static values, we will get them from emmc hardware instead
echo "Max CPU Clock selection:"
echo 
frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5)
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $frequencies; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 or 99 = exit]:"
read input
if [ "$input" == "0" ];then
exit
fi
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
maxkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n 5 | head -n$input | tail -n1)
clear
echo "Min CPU Clock selection:"
echo 
frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4)
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $frequencies; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 or 99 = exit]:"
read input
if [ "$input" == "0" ];then
exit
fi
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
minkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | head -n 4 | head -n$input | tail -n1)
clear
echo "Max Screen Off CPU Clock selection:" 
echo 
frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n+5 | head -n 8)
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $frequencies; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 or 99 = exit]:"
read input
if [ "$input" == "0" ];then
exit
fi
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
maxscroff=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed 's/ /\n/g' | sed '$d' | tail -n+5 | head -n 8 | head -n$input | tail -n1)
clear
echo "Governor selection:"
echo
governors=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d')
# Load text file lines into a bash array & print as a menu.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $governors; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 or 99 = exit]:"
read input
if [ "$input" == "0" ];then
exit
fi
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed 's/ /\n/g' | sed '$d' | head -n$input | tail -n1)
clear
echo "IO Scheduler selection:"
echo 
schedulers=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed 's/ /\n/g' | sed '$d')
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $schedulers; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Choose number selection[0 or 99 = exit]:"
read input
if [ "$input" == "0" ];then
exit
fi
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
scheduler=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed 's/ /\n/g' | sed '$d' | sed 's/ //g' | head -n$input | tail -n1)
if [ "$kerneltype" == "2" ];then
scheduler=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed "s/$scheduler/[$scheduler]/g")
fi
clear
echo "Sweep2Wake selection:"
echo 
echo "1) Disable"
echo "2) Enable"
echo "3) Enable w/o button lights"
echo "Choose number selection[99 = abort][0 = default:Disabled]:"
read s2w
if [ "$s2w" -gt "3" ];then
echo "Invalid selection: Aborting script"
exit
fi
	case "$s2w" in
                "0")
                        s2w=0
			s2w2=disabled
                        ;;
                "1")
                        s2w=0
			s2w2=off
                        ;;
                "2")
                        s2w=1
			s2w2=lights
                        ;;
                "3")
                        s2w=2
			s2w2=nolights
                        ;;
                "99")
			exit
                        ;;
	esac
clear
maxkhz2=$(echo $maxkhz | sed '$s/000$/mhz/')
minkhz2=$(echo $minkhz | sed '$s/000$/mhz/')
maxscroff2=$(echo $maxscroff | sed '$s/000$/mhz/')
echo "Last chance before we flash/push to system" 
echo "Options chosen are $maxkhz2 $minkhz2 $maxscroff2 $gov $scheduler S2w $s2w2"
echo 
echo "1) Yes; Let's do it!"
echo "2) No; let's just save it for later!"
echo "Confirm flash?"
read confirm
	case "$confirm" in
		"1")
			clear
			cd /$extsd
			if [ ! -d "/temp" ]; then
			#-- Checking if temp exists if not we will create it
			mkdir temp
			fi
			cd temp
			dd if=/dev/block/$boot of=/$extsd/temp/tempboot.img
			abootimg -x /$extsd/temp/tempboot.img
			sed -i -e "s/gov.*//g" bootimg.cfg
			sed -i -e "$ s/$/ gov=$gov maxkhz=$maxkhz minkhz=$minkhz scheduler=$scheduler maxscroff=$maxscroff s2w=$s2w/g" bootimg.cfg
			abootimg -u /$extsd/temp/tempboot.img -f /$extsd/temp/bootimg.cfg
			dd if=/$extsd/temp/tempboot.img of=/dev/block/$boot
			rm bootimg.cfg
			rm initrd.img
			rm zImage
			if [ ! -d "/$extsd/lunar" ]; then
			mkdir /$extsd/lunar
			fi
			if [ ! -e /$extsd/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg ]; then
			echo "gov="$gov "maxkhz="$maxkhz "minkhz="$minkhz "scheduler="$scheduler "maxscroff="$maxscroff "s2w="$s2w"" >> /sdcard2/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg
			echo "Flashed new boot and created .cfg at"
			echo "/$extsd/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg"
			else
			echo "Configuration already exists; aborting copy to /$extsd/lunar"
			fi
			rm tempboot.img
			rm /data/dalvik-cache/*
			rm /cache/dalvik-cache/*
			echo "Rebooting to recovery....."
			echo ".... to wipe Dalvik Cache & Cache"
			echo "--wipe_cache" >> /cache/recovery/command
			echo "GoodBye!"
			reboot recovery
			;;
                "2")
			echo "Aborted push to system!"
			if [ ! -e /$extsd/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg ]; then
			echo "gov="$gov "maxkhz="$maxkhz "minkhz="$minkhz "scheduler="$scheduler "maxscroff="$maxscroff "s2w="$s2w"" >> /sdcard2/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg
			echo "Created .cfg at"
			echo "/$extsd/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg"
			else
			echo "Configuration already exists; aborting copy to /$extsd/lunar"
			fi
			echo "Come back soon"
			;;
	esac
