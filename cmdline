#!/system/bin/sh
#
# 
# Kludgy hack to help with kernels
boot=$(grep -i "boot" /proc/emmc | sed 's/.*boot\(.*\)<\/recovery.*/\1/' | sed 's/:[^:]*$//')
recovery=$(grep -i "recovery" /proc/emmc | sed 's/.*boot\(.*\)<\/recovery.*/\1/' | sed 's/:[^:]*$//')
hardware=$(grep -i "board=" /system/build.prop | sed "s/.*board=//" | cut -d" " -f1)
#Let's not rely on static values, we will get them from emmc hardware instead
clear
echo "Max CPU Clock selection:"
echo 
frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g' | tail -n 5)
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $frequencies; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Enter a selection [exit = 99]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
maxkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g' | tail -n 5 | head -n$input | tail -n1)
clear
echo "Min CPU Clock selection:"
echo 
frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g' | head -n 4)
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $frequencies; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Enter a selection [exit = 99]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
minkhz=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g' | head -n 4 | head -n$input | tail -n1)
clear
echo "Max Screen Off CPU Clock selection:" 
echo 
frequencies=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g' | tail -n+5 | head -n 8)
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $frequencies; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Enter a selection [exit = 99]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
maxscroff=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g' | tail -n+5 | head -n 8 | head -n$input | tail -n1)
clear
echo "Governor selection:"
echo
governors=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | sed -e 's/\s\s*/\n/g' | sed 's/ //g' | sed '$d')
# Load text file lines into a bash array & print as a menu.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $governors; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Enter a selection [exit = 99]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors  | sed -e 's/\s\s*/\n/g' | sed 's/ //g' | sed '$d' | head -n$input | tail -n1)
clear
echo "IO Scheduler selection:"
echo 
schedulers=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g')
# Load text file lines into a bash array.
OLD_IFS=$IFS
IFS=$'\n'
let line_counter=0
for line in $schedulers; do
	let line_counter=$(($line_counter+1))
	printf "${line_counter}) ${line}\n"
done
IFS=$OLD_IFS
echo "Enter a selection [exit = 99]:"
read input
if [ "$input" == "99" ];then
exit
fi
if [ "$input" -gt "$line_counter" ];then
echo "Invalid selection: Aborting script"
exit
fi
scheduler=$(cat /sys/block/mmcblk0/queue/scheduler | sed 's/[[]//g' | sed 's/[]]//g' | sed -e 's/\s\s*/\n/g' | sed '$d' | sed 's/ //g' | head -n$input | tail -n1)
clear
echo "Sweep2Wake selection:"
echo 
echo "1) Disable"
echo "2) Enable"
echo "3) Enable w/o button lights"
echo "Choose number selection[99 = abort][0 = default:Disabled]:"
read s2w
	case "$s2w" in
                "0")
                        s2w=0
			s2w2=disabled
                        ;;
                "1")
                        s2w=0
			s2w2=off
                        ;;
                "2")
                        s2w=1
			s2w2=lights
                        ;;
                "3")
                        s2w=2
			s2w2=nolights
                        ;;
                "99")
			exit
                        ;;
	esac
if [ "$s2w" -gt "2" ];then
echo "Invalid selection: Aborting script"
exit
fi
clear
maxkhz2=$(echo $maxkhz | sed '$s/000$/mhz/')
minkhz2=$(echo $minkhz | sed '$s/000$/mhz/')
maxscroff2=$(echo $maxscroff | sed '$s/000$/mhz/')
echo "Last chance before we flash" 
echo "Options chosen are $maxkhz2 $minkhz2 $maxscroff2 $gov $scheduler S2w $s2w2"
echo 
echo "1) Yes; I am ready flash it right away"
echo "2) No; let's just save it for later"
echo "Confirm flash?"
read confirm
	case "$confirm" in
		"1")
			clear
			cd /sdcard2
			if [ ! -d "/temp" ]; then
			#-- Checking if temp exists if not we will create it
			mkdir temp
			fi
			cd temp
			dd if=/dev/block/$boot of=/sdcard2/temp/tempboot.img
			abootimg -x /sdcard2/temp/tempboot.img
			size1=$(stat -c %s zImage)
			size2=$(stat -c %s initrd.img)
			size=$(($size1 + $size2 + 1048576))
			printf -v hexsize "%x" "$size"
			sed -i '/cmdline = / d' bootimg.cfg
			sed -i "s/bootsize.*/bootsize = 0x$hexsize/g" bootimg.cfg
			echo "cmdline = console=ttyHSL3 androidboot.hardware="$hardware" no_console_suspend=1 gov="$gov "maxkhz="$maxkhz "minkhz="$minkhz "scheduler="$scheduler "maxscroff="$maxscroff "s2w="$s2w"" >> bootimg.cfg
			abootimg -u /sdcard2/temp/tempboot.img -f /sdcard2/temp/bootimg.cfg
			dd if=/sdcard2/temp/tempboot.img of=/dev/block/$boot
			rm bootimg.cfg
			rm initrd.img
			rm zImage
			if [ ! -d "/sdcard2/lunar" ]; then
			mkdir /sdcard2/lunar
			fi
			if [ ! -e /sdcard2/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg ]; then
			echo "gov="$gov "maxkhz="$maxkhz "minkhz="$minkhz "scheduler="$scheduler "maxscroff="$maxscroff "s2w="$s2w"" >> /sdcard2/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg
			echo "Flashed new boot and created .cfg at"
			echo "/sdcard2/lunar/"$gov"_"$maxkhz2"_"$minkhz2"_"$scheduler"_"$maxscroff2"_s2w"$s2w2".cfg"
			else
			echo "Configuration already exists; aborting copy to /sdcard2/lunar"
			fi
			rm tempboot.img
			rm /sdcard2/lunar/bootimg.cfg
			rm /sdcard2/lunar/initrd.img
			rm /sdcard2/lunar/zImage
			rm /data/dalvik-cache/*
			echo "Rebooting to recovery....."
			echo ".... to wipe Dalvik Cache & Cache"
			echo "--wipe_cache" >> /cache/recovery/command
			echo "GoodBye!"
			reboot recovery
			;;
                "2")
			echo "Aborted flash!"
			cd /sdcard2
			if [ ! -d "/temp" ]; then
			mkdir temp
			fi
			cd temp
			dd if=/dev/block/$boot of=/sdcard2/temp/tempboot.img
			abootimg -x /sdcard2/temp/tempboot.img
			size1=$(stat -c %s zImage)
			size2=$(stat -c %s initrd.img)
			size=$(($size1 + $size2 + 1048576))
			printf -v hexsize "%x" "$size"
			sed -i '/cmdline = / d' bootimg.cfg
			sed -i "s/bootsize.*/bootsize = 0x$hexsize/g" bootimg.cfg
			echo "cmdline = console=ttyHSL3 androidboot.hardware="$hardware" no_console_suspend=1 gov="$gov "maxkhz="$maxkhz "minkhz="$minkhz "scheduler="$scheduler "maxscroff="$maxscroff "s2w="$s2w"" >> bootimg.cfg
			abootimg -u /sdcard2/temp/tempboot.img -f /sdcard2/temp/bootimg.cfg
			rm bootimg.cfg
			rm initrd.img
			rm zImage
			if [ ! -d "/sdcard2/lunar" ]; then
			mkdir /sdcard2/lunar
			fi
			if [ ! -e /sdcard2/lunar/boot_"$maxkhz2"_"$minkhz2"_"$maxscroff2"_"$gov"_"$scheduler"_s2w"$s2w2".img ]; then
			mv /sdcard2/temp/tempboot.img /sdcard2/lunar/boot_"$maxkhz2"_"$minkhz2"_"$maxscroff2"_"$gov"_"$scheduler"_s2w"$s2w2".img
			echo "I just saved your boot LOL"
			echo "It is saved here /sdcard2/lunar/boot_"$maxkhz2"_"$minkhz2"_"$maxscroff2"_"$gov"_"$scheduler"_s2w"$s2w2".img"
			echo "Run 'sh /sbin/menu.sh' to flash"
			else
			echo "Configuration already exists; aborting copy to /sdcard2/lunar"
			rm tempboot.img
			fi
			echo "Come back soon!"
                        ;;
	esac
$confirm
